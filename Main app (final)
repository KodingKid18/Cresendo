import tkinter as tk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
import pygame
import subprocess


class SplashScreen(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("Crescendo - Loading")
        self.geometry("600x400+{}+{}".format(
            int((self.winfo_screenwidth() - 600) / 2),
            int((self.winfo_screenheight() - 400) / 2)
        ))
        self.configure(bg="#000000")
        self.overrideredirect(True)

        # Gradient Canvas
        canvas = tk.Canvas(self, width=600, height=400, bg="#000000", highlightthickness=0)
        canvas.pack(fill="both", expand=True)
        self.gradient(canvas, 0, 0, 600, 400, "#1E90FF", "#001F3F")

        # Neon Text
        tk.Label(self, text="Crescendo", font=("Helvetica", 36, "bold"), fg="#00FFAB", bg="#000000").place(relx=0.5, rely=0.4, anchor="center")
        tk.Label(self, text="Futurize your frequency and Revolutionize your resonance", font=("Helvetica", 16, "italic"), fg="white", bg="#000000").place(relx=0.5, rely=0.6, anchor="center")

        self.after(5000, self.destroy)  # Close splash screen after 5 seconds

    @staticmethod
    def gradient(canvas, x1, y1, x2, y2, color1, color2):
        for i in range(100):
            r = int(color1[1:3], 16) + (int(color2[1:3], 16) - int(color1[1:3], 16)) * i // 100
            g = int(color1[3:5], 16) + (int(color2[3:5], 16) - int(color1[3:5], 16)) * i // 100
            b = int(color1[5:], 16) + (int(color2[5:], 16) - int(color1[5:], 16)) * i // 100
            color = f"#{r:02x}{g:02x}{b:02x}"
            canvas.create_rectangle(x1, y1 + (y2 - y1) * i // 100, x2, y1 + (y2 - y1) * (i + 1) // 100, outline=color, fill=color)


class MusicGenerator(tk.Tk):
    def __init__(self):
        super().__init__()

        # Window Configuration
        self.title("Crescendo")
        self.geometry("1280x720")
        self.configure(bg="#0f0f0f")

        # Initialize audio
        pygame.mixer.init(frequency=44100, size=-16, channels=2, buffer=4096)

        # Splash screen
        SplashScreen(self)
        self.withdraw()
        self.after(5000, self.setup_gui)  # 5-second delay before showing the main window

    def setup_gui(self):
        self.deiconify()

        # Gradient Background
        canvas = tk.Canvas(self, width=1280, height=720, bg="#000000", highlightthickness=0)
        canvas.pack(fill="both", expand=True)
        SplashScreen.gradient(canvas, 0, 0, 1280, 720, "#1E90FF", "#001F3F")

        # Add Crescendo Logo
        tk.Label(self, text="Crescendo", font=("Helvetica", 72, "bold"), fg="#00FFAB", bg="#001F3F").place(relx=0.5, rely=0.2, anchor="center")

        # Add Description
        description = (
            "Crescendo is your gateway to revolutionizing the world of music.\n"
            "It crafts original tracks by blending AI-generated beats, harmonies, and lyrics across genres, "
            "delivering performances rich in emotion and precision.\n"
            "Crescendoâ€™s dynamic shows adapt to audience preferences, creating unique, immersive experiences.\n"
            "Collaborating with artists worldwide, the band pushes musical boundaries, merging human artistry with machine innovation.\n"
            "Crescendo embodies the future of music, captivating listeners with its fusion of passion, ingenuity, and cutting-edge technology."
        )
        tk.Label(self, text=description, font=("Arial", 14), fg="white", bg="#001F3F", wraplength=1000, justify="center").place(relx=0.5, rely=0.5, anchor="center")

        # Add Try Now Button
        button = tk.Button(self,
                           text="Try Now",
                           activebackground="blue",
                           activeforeground="white",
                           anchor="center",
                           bd=3,
                           bg="lightgray",
                           cursor="hand2",
                           fg="black",
                           font=("Arial", 12),
                           height=2,
                           highlightbackground="black",
                           highlightcolor="green",
                           highlightthickness=2,
                           justify="center",
                           padx=10,
                           pady=5,
                           width=15,
                           wraplength=100,
                           command=self.run_secondary_script)
        button.place(relx=0.5, rely=0.8, anchor="center")

        # Bind hover events
        button.bind("<Enter>", lambda e: button.config(bg="#00FFAB", fg="black"))
        button.bind("<Leave>", lambda e: button.config(bg="lightgray", fg="black"))

    def run_secondary_script(self):
        try:
            subprocess.Popen(["python", "secondary_script.py"])  # Reference to the renamed file
        except Exception as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    try:
        app = MusicGenerator()
        app.mainloop()
    except Exception as e:
        print(f"Error: {e}")
